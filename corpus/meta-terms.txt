========
Comments
========

/* comment */ init /* comment */ {
	int /* an integer */ v /* variable */;
	v /* this / * is * / okay */ ++;
}

---

(source_file
  (comment)
  (init
    (comment)
    (decl_lst
      (one_decl
        (typename)
        (comment)
        (ivar
          (name))))
    (comment)
    (assign
      (varref
        (name))
      (comment))))

======
Inline
======

inline recv() {
  requesting = true
}
init { recv() }

---

(source_file
  (inline
    (name)
    (assign
      (varref
        (name))))
  (init
    (name)))

===
Ltl
===

ltl p1 { []<> p }
ltl p2 { always eventually p }
ltl p3 { eventually (a > b) implies len(q) == 0 }
ltl vivacite { ([]dem_SC -> (<>en_SC)) }

---

(source_file
  (inline_ltl
    (name)
    (unary_ltl
      (unary_ltl
        (varref
          (name)))))
  (inline_ltl
    (name)
    (unary_ltl
      (unary_ltl
        (varref
          (name)))))
  (inline_ltl
    (name)
    (binary_ltl
      (unary_ltl
        (binary_expr
          (varref
            (name))
          (varref
            (name))))
      (binary_expr
        (varref
          (name))
        (number))))
  (inline_ltl
    (name)
    (binary_ltl
      (unary_ltl
        (varref
          (name)))
      (unary_ltl
        (varref
          (name))))))

======
Macros
======

#include "promela_model"
#define N      3    /* Number of processes */ 
#define L     10    /* Buffer size */
#define NIL (N+1)   /* for an undefined value */
#define q (len(q) < 5)
#define en_SC (node[1]@in_SC)

---

(source_file
  (macros
    (string))
  (macros
    (name)
    (number))
  (comment)
  (macros
    (name)
    (number))
  (comment)
  (macros
    (name)
    (binary_expr
      (varref
        (name))
      (number)))
  (comment)
  (macros
    (name)
    (binary_expr
      (varref
        (name))
      (number)))
  (macros
    (name)
    (name)
    (number)
    (name)))
