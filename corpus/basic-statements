======
Assert
======

active proctype monitor()
{
	assert(1+1 != 2);
	assert(a > b);
	assert(false)
}

---

(source_file
  (proctype
    (active)
    (name)
    (binary_expr
      (binary_expr
        (number)
        (number))
      (number))
    (binary_expr
      (varref
        (name))
      (varref
        (name)))))

======
Assign
======

init {
  a = 12;
  r.b[a] = a * 4 + 7;
  a = b;
  b++
}

---

(source_file
  (init
    (assign
      (varref
        (name))
      (number))
    (assign
      (varref
        (name)
        (varref
          (name)
          (varref
            (name))))
      (binary_expr
        (binary_expr
          (varref
            (name))
          (number))
        (number)))
    (assign
      (varref
        (name))
      (varref
        (name)))
    (assign
      (varref
        (name)))))

=========
Condition
=========

init {
  if
  :: (1) -> skip
  :: (0) -> skip
  :: (skip) -> skip
  :: (true) -> skip
  :: (false) -> skip
  :: (a == b) -> skip
  fi
}

---

(source_file
  (init
    (options
      (number)
      (number)
      (binary_expr
        (varref
          (name))
        (varref
          (name))))))

=============
Printf/Printm
=============

init {
  printf("numbers: %d\t%d\n", (-10)%(-9), (-10)<<(-2));
  printm(x)
}

---

(source_file
  (init
    (string)
    (arg_lst
      (binary_expr
        (unary_expr
          (number))
        (unary_expr
          (number)))
      (binary_expr
        (unary_expr
          (number))
        (unary_expr
          (number))))
    (name)))

=======
Receive
=======

init {
  set?x;
  set?<x>;
  set??5;
  set??<y>
}

---

(source_file
  (init
    (receive
      (varref
        (name))
      (recv_args
        (recv_arg
          (varref
            (name)))))
    (receive
      (varref
        (name))
      (recv_args
        (recv_arg
          (varref
            (name)))))
    (receive
      (varref
        (name))
      (recv_args
        (recv_arg
          (number))))
    (receive
      (varref
        (name))
      (recv_args
        (recv_arg
          (varref
            (name)))))))

====
Send
====

active proctype tester()
{
	x!!3; x!!2; x!!1; x!4
}

---

(source_file
  (proctype
    (active)
    (name)
    (send
      (varref
        (name))
      (send_args
        (arg_lst
          (unary_expr
            (number)))))
    (send
      (varref
        (name))
      (send_args
        (arg_lst
          (unary_expr
            (number)))))
    (send
      (varref
        (name))
      (send_args
        (arg_lst
          (unary_expr
            (number)))))
    (send
      (varref
        (name))
      (send_args
        (arg_lst
          (number))))))
