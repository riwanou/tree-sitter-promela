======
Active
======

active proctype A(int a) { byte tmp }
active [4] proctype B() { run A(_pid) }
---

(source_file
  (proctype
    (active)
    (name)
    (decl_lst
      (one_decl
        (typename)
        (ivar
          (name))))
    (block
      (decl_lst
        (one_decl
          (typename)
          (ivar
            (name))))))
  (proctype
    (active
      (number))
    (name)
    (block
      (name)
      (arg_lst
        (varref
          (name))))))

======
Arrays
======

byte state[N]
init {
  state[0] = state[3] + 5 * state[3*2/n]
}

---

(source_file
  (decl_lst
    (one_decl
      (typename)
      (ivar
        (name)
        (varref
          (name)))))
  (init
    (block
      (assign
        (varref
          (name)
          (number))
        (binary_expr
          (varref
            (name)
            (number))
          (binary_expr
            (number)
            (varref
              (name)
              (binary_expr
                (binary_expr
                  (number)
                  (number))
                (varref
                  (name))))))))))

====
Chan
====

chan a = [16] of { short }
chan c[3] = [N] of { mtype }
chan qname = [8] of { mtype, int, chan, byte }

---

(source_file
  (decl_lst
    (one_decl
      (typename)
      (ivar
        (name)
        (ch_init
          (number)
          (typename)))))
  (decl_lst
    (one_decl
      (typename)
      (ivar
        (name)
        (number)
        (ch_init
          (varref
            (name))
          (typename)))))
  (decl_lst
    (one_decl
      (typename)
      (ivar
        (name)
        (ch_init
          (number)
          (typename)
          (typename)
          (typename)
          (typename))))))

========
Datatype
========

byte a, b = 2; short c[3] = 3

---

(source_file
  (decl_lst
    (one_decl
      (typename)
      (ivar
        (name))
      (ivar
        (name)
        (number)))
    (one_decl
      (typename)
      (ivar
        (name)
        (number)
        (number)))))

====
Init
====

init { skip }

---

(source_file
      (init
        (block)))

=====
Mtype
=====

mtype = { ack, nak, err, next, accept }

---

(source_file
  (mtype
    (name)
    (name)
    (name)
    (name)
    (name)))

========
Proctype
========

proctype A(mtype x) { mtype state; state = x }

---

(source_file
  (proctype
    (name)
    (decl_lst
      (one_decl
        (typename)
        (ivar
          (name))))
    (block
      (decl_lst
        (one_decl
          (typename)
          (ivar
            (name))))
      (assign
        (varref
          (name))
        (varref
          (name))))))

======
Xr/Xs
======

active proctype S() {	 xs q; xr r }

---

(source_file
  (proctype
    (active)
    (name)
    (block
      (varref
        (name))
      (varref
        (name)))))
