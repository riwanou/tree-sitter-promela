=====
Utype
=====

typedef array {
	byte aa[4]
}

---

(source_file
  (utype
    (name)
    (decl_lst
      (one_decl
        (typename)
        (ivar
          (name)
          (const
            (number)))))))

=====
Mtype
=====

mtype = { ack, nak, err, next, accept }

---

(source_file
	(mtype
	  (name)
	  (name)
	  (name)
	  (name)
	  (name)))

========
Decl_lst
========

int a = 10;
int b = 2

---

(source_file
  (decl_lst
    (one_decl
      (typename)
      (ivar
        (name)
        (const
          (number))))
    (one_decl
      (typename)
      (ivar
        (name)
        (const
          (number))))))

========
Ch_init
========

init {
	chan qname = [8] of { mtype, int, chan, byte };
	chan c[3] = [0] of { short }
}

---

(source_file
	(init
	  (decl_lst
	    (one_decl
	      (typename)
	      (ivar
	        (name)
	        (ch_init
	          (const
	            (number))
	          (typename)
	          (typename)
	          (typename)
	          (typename))))
	    (one_decl
	      (typename)
	      (ivar
	        (name)
	        (const
	          (number))
	        (ch_init
	          (const
	            (number))
	          (typename)))))))

====
Name
====

init {
	int b1E_q
}

---

(source_file
  (init
    (decl_lst
      (one_decl
        (typename)
        (ivar
          (name))))))

======
Atomic
======

init {
	byte proc; 
  atomic {
		proc = 0
  }
}

---

(source_file
  (init
    (decl_lst
      (one_decl
        (typename)
        (ivar
          (name))))
    (stmnt
      (stmnt
        (assign
          (varref
            (name))
          (const
            (number)))))))

===========
Binary_expr
===========

init {
	int a = 1 * 1 + 2 / 3
}

---

(source_file
  (init
    (decl_lst
      (one_decl
        (typename)
        (ivar
          (name)
          (binary_expr
            (binary_expr
              (const
                (number))
              (const
                (number)))
            (binary_expr
              (const
                (number))
              (const
                (number)))))))))

==========
Unary_expr
==========

init {
	int a = -1 < !3
}

---

(source_file
  (init
    (decl_lst
      (one_decl
        (typename)
        (ivar
          (name)
          (binary_expr
            (unary_expr
              (const
                (number)))
            (unary_expr
              (const
                (number)))))))))

======
String
======

int b = "bloup"
